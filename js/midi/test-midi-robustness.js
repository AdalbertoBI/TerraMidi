// Test Suite: Web MIDI API Robustness Validation
// ================================================
// Data: 22/10/2025
// Descri√ß√£o: Testes manuais para validar fluxo de inicializa√ß√£o, permiss√µes e reconex√£o

/**
 * üß™ TESTE 1: Validar Contexto Seguro
 * 
 * Execu√ß√£o: Abra Console (F12) e execute:
 * testSecureContext()
 */
function testSecureContext() {
    console.log('');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('üß™ TESTE 1: Validar Contexto Seguro');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    
    const validation = window.midiManager?.validateSecureContext?.();
    
    if (!validation) {
        console.error('‚ùå midiManager n√£o encontrado. Carregue a aplica√ß√£o primeiro.');
        return;
    }
    
    console.log('');
    console.log('Resultado:', validation.allowed ? '‚úÖ PASSOU' : '‚ùå FALHOU');
    console.log('Raz√£o:', validation.reason);
    console.log('');
    
    if (!validation.allowed) {
        console.log('üí° Sugest√µes:');
        validation.suggestions.forEach((s, i) => {
            console.log(`  ${i + 1}. ${s}`);
        });
    }
    
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('');
    
    return validation.allowed;
}

/**
 * üß™ TESTE 2: Validar Estado de Permiss√£o
 * 
 * Execu√ß√£o: Abra Console (F12) e execute:
 * testPermissionStatus()
 */
async function testPermissionStatus() {
    console.log('');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('üß™ TESTE 2: Validar Estado de Permiss√£o MIDI');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    
    if (!navigator.permissions || !navigator.permissions.query) {
        console.warn('‚ö†Ô∏è Permissions API n√£o dispon√≠vel neste navegador');
        return;
    }
    
    try {
        const status = await navigator.permissions.query({ name: 'midi' });
        
        console.log('Estado de Permiss√£o:', status.state);
        console.log('');
        
        switch (status.state) {
            case 'granted':
                console.log('‚úÖ Permiss√£o j√° concedida');
                console.log('   Comportamento: requestMIDIAccess() ser√° resolvido imediatamente');
                break;
                
            case 'denied':
                console.log('‚õî Permiss√£o foi negada');
                console.log('   A√ß√£o: Abra chrome://settings/content/midiDevices e remova o bloqueio');
                break;
                
            case 'prompt':
                console.log('üîî Permiss√£o ainda n√£o concedida');
                console.log('   Comportamento: Um popup ser√° exibido ao chamar requestMIDIAccess()');
                break;
        }
        
        // Configurar observer para mudan√ßas
        status.addEventListener('change', (event) => {
            console.log(`‚ÑπÔ∏è Estado de permiss√£o mudou para: ${event.target.state}`);
        });
        
    } catch (error) {
        console.error('‚ùå Erro ao consultar permiss√£o:', error);
    }
    
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('');
}

/**
 * üß™ TESTE 3: Testar Inicializa√ß√£o com Gesto do Usu√°rio
 * 
 * Execu√ß√£o: Abra Console (F12) e execute:
 * testUserGestureInitialization()
 * Depois clique em qualquer lugar da p√°gina
 */
async function testUserGestureInitialization() {
    console.log('');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('üß™ TESTE 3: Testar Inicializa√ß√£o com Gesto do Usu√°rio');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('‚è≥ Aguardando seu clique em qualquer lugar da p√°gina...');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    
    await new Promise((resolve) => {
        document.addEventListener('click', async () => {
            console.log('');
            console.log('‚úÖ Clique detectado! Iniciando MIDI...');
            console.log('');
            
            try {
                await window.midiManager?.initializeOnUserGesture?.('click');
                console.log('‚úÖ Inicializa√ß√£o completada');
            } catch (error) {
                console.error('‚ùå Erro na inicializa√ß√£o:', error);
            }
            
            resolve();
        }, { once: true });
    });
    
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('');
}

/**
 * üß™ TESTE 4: Testar Tratamento de Erros
 * 
 * Execu√ß√£o: Abra Console (F12) e execute:
 * testErrorHandling()
 */
async function testErrorHandling() {
    console.log('');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('üß™ TESTE 4: Testar Tratamento de Erros');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    
    const testErrors = [
        {
            name: 'SecurityError',
            message: 'access denied for origin',
            type: 'Contexto inseguro (HTTP em host remoto)',
            solution: 'Use HTTPS ou localhost'
        },
        {
            name: 'NotAllowedError',
            message: 'MIDI access denied',
            type: 'Permiss√£o negada pelo usu√°rio',
            solution: 'Abra chrome://settings/content/midiDevices'
        },
        {
            name: 'NotSupportedError',
            message: 'MIDI is not supported',
            type: 'Navegador n√£o suporta Web MIDI',
            solution: 'Use Chrome, Edge ou Opera'
        },
        {
            name: 'TimeoutError',
            message: 'Permission request timed out',
            type: 'Timeout ao solicitar permiss√£o',
            solution: 'Tente novamente e clique rapidamente'
        }
    ];
    
    console.log('Tipos de erro esperados:');
    console.log('');
    
    testErrors.forEach((err, i) => {
        console.log(`${i + 1}. ${err.name}`);
        console.log(`   Mensagem: ${err.message}`);
        console.log(`   Tipo: ${err.type}`);
        console.log(`   Solu√ß√£o: ${err.solution}`);
        console.log('');
    });
    
    console.log('‚úÖ Os erros acima s√£o tratados pela classe MIDIDeviceManager');
    console.log('   M√©todos respons√°veis:');
    console.log('   ‚Ä¢ handleSecurityError()');
    console.log('   ‚Ä¢ handleNotAllowedError()');
    console.log('   ‚Ä¢ handleNotSupportedError()');
    console.log('   ‚Ä¢ handleTimeoutError()');
    console.log('   ‚Ä¢ handleAbortError()');
    console.log('   ‚Ä¢ handleGenericError()');
    
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('');
}

/**
 * üß™ TESTE 5: Testar Detec√ß√£o de Dispositivos
 * 
 * Execu√ß√£o: Abra Console (F12) e execute:
 * testDeviceDetection()
 * Depois conecte/desconecte o Midi-Terra
 */
async function testDeviceDetection() {
    console.log('');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('üß™ TESTE 5: Testar Detec√ß√£o de Dispositivos');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    
    if (!window.midiManager?.isInitialized) {
        console.warn('‚ö†Ô∏è MIDI n√£o inicializado. Execute initialize() primeiro.');
        return;
    }
    
    console.log('Estado atual:');
    console.log(`  Dispositivos conectados: ${window.midiManager?.connectedDevices?.size || 0}`);
    console.log('');
    
    // Listar dispositivos
    if (window.midiManager?.connectedDevices?.size > 0) {
        console.log('‚úÖ Dispositivos conectados:');
        window.midiManager.connectedDevices.forEach((device, deviceId) => {
            console.log(`  ‚Ä¢ ${device.name} (ID: ${deviceId})`);
            console.log(`    Fabricante: ${device.manufacturer || 'N/A'}`);
            console.log(`    Estado: ${device.state}`);
        });
    } else {
        console.log('‚ùå Nenhum dispositivo detectado');
        console.log('   A√ß√µes:');
        console.log('   1. Reconecte o cabo USB do Midi-Terra');
        console.log('   2. Feche Microsoft Edge se estiver aberto');
        console.log('   3. Feche DAWs e aplicativos MIDI');
        console.log('   4. Recarregue a p√°gina (F5)');
    }
    
    console.log('');
    console.log('üìù Deixe este teste executando e:');
    console.log('   1. Desconecte o Midi-Terra do USB');
    console.log('   2. Observe os logs de desconex√£o');
    console.log('   3. Reconecte o Midi-Terra');
    console.log('   4. Observe os logs de reconex√£o autom√°tica');
    
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('');
}

/**
 * üß™ TESTE 6: Testar Event Listener (onstatechange)
 * 
 * Execu√ß√£o: Abra Console (F12) e execute:
 * testStateChangeListener()
 * Depois conecte/desconecte o Midi-Terra
 */
async function testStateChangeListener() {
    console.log('');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('üß™ TESTE 6: Testar Event Listener onstatechange');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    
    const midiAccess = window.midiManager?.getMIDIAccess?.();
    
    if (!midiAccess) {
        console.warn('‚ö†Ô∏è midiAccess n√£o dispon√≠vel');
        return;
    }
    
    // Listar portas atuais
    console.log('Portas MIDI atuais:');
    console.log(`  Inputs: ${midiAccess.inputs.size}`);
    console.log(`  Outputs: ${midiAccess.outputs.size}`);
    console.log('');
    
    Array.from(midiAccess.inputs.values()).forEach((input, i) => {
        console.log(`  Input ${i + 1}: ${input.name} (state: ${input.state})`);
    });
    
    console.log('');
    console.log('üìù Deixe este teste executando:');
    console.log('   Conecte/Desconecte o Midi-Terra USB');
    console.log('   Voc√™ deve ver eventos de mudan√ßa de estado abaixo');
    console.log('');
    
    // Setup listener tempor√°rio para este teste
    const testListener = (event) => {
        const timestamp = new Date().toISOString();
        console.log(`[${timestamp}] ${event.port.state.toUpperCase()}: ${event.port.name}`);
    };
    
    midiAccess.addEventListener('statechange', testListener);
    
    console.log('‚è≥ Listener ativo. Aguardando eventos...');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('');
}

/**
 * üß™ TESTE 7: Testar Mensagens MIDI
 * 
 * Execu√ß√£o: Abra Console (F12) e execute:
 * testMIDIMessages()
 * Depois pressione uma tecla no Midi-Terra
 */
async function testMIDIMessages() {
    console.log('');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('üß™ TESTE 7: Testar Recep√ß√£o de Mensagens MIDI');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    
    const midiAccess = window.midiManager?.getMIDIAccess?.();
    
    if (!midiAccess || midiAccess.inputs.size === 0) {
        console.warn('‚ö†Ô∏è Nenhuma porta MIDI de entrada dispon√≠vel');
        return;
    }
    
    const inputs = Array.from(midiAccess.inputs.values());
    console.log(`Monitorando ${inputs.length} porta(s) MIDI:`);
    
    inputs.forEach((input) => {
        console.log(`  ‚Ä¢ ${input.name}`);
        
        // Setup listener para mensagens
        input.onmidimessage = (event) => {
            const [status, note, velocity] = event.data;
            const timestamp = new Date().toISOString();
            const statusName = (status >> 4) === 9 ? 'Note On' : 'Note Off';
            
            console.log(`[${timestamp}] ${statusName} | Nota: ${note} | Velocity: ${velocity}`);
        };
    });
    
    console.log('');
    console.log('üìù Agora pressione uma tecla no Midi-Terra');
    console.log('   Voc√™ deve ver eventos como:');
    console.log('   [2025-10-22T10:30:45] Note On | Nota: 60 | Velocity: 100');
    console.log('');
    console.log('‚è≥ Listener ativo. Aguardando mensagens MIDI...');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('');
}

/**
 * üß™ TESTE 8: Teste Completo de Reconex√£o Autom√°tica
 * 
 * Execu√ß√£o: Abra Console (F12) e execute:
 * testAutoReconnection()
 * Depois desconecte/reconecte o Midi-Terra
 */
async function testAutoReconnection() {
    console.log('');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('üß™ TESTE 8: Teste Completo de Reconex√£o Autom√°tica');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    
    if (!window.midiManager?.isInitialized) {
        console.warn('‚ö†Ô∏è MIDI n√£o inicializado');
        return;
    }
    
    console.log('Sequ√™ncia de teste:');
    console.log('');
    console.log('1. ‚è≥ Aguardando desconex√£o do dispositivo...');
    console.log('   (Desconecte o cabo USB do Midi-Terra)');
    console.log('');
    console.log('2. ‚è≥ Ap√≥s desconex√£o, aguardando reconex√£o...');
    console.log('   (Reconecte o cabo USB do Midi-Terra)');
    console.log('');
    console.log('3. ‚úÖ Sistema tentar√° reconectar automaticamente');
    console.log('   (Observe os logs de tentativa de reconex√£o)');
    console.log('');
    console.log('Resultado esperado:');
    console.log('  ‚úÖ Dispositivo reconectado sem a√ß√£o manual');
    console.log('  ‚úÖ Eventos MIDI voltam a funcionar');
    console.log('  ‚úÖ Sem perda de estado da aplica√ß√£o');
    console.log('');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('');
}

/**
 * üß™ TESTE 9: Diagn√≥stico Completo
 * 
 * Execu√ß√£o: Abra Console (F12) e execute:
 * runFullDiagnostics()
 */
async function runFullDiagnostics() {
    console.clear();
    console.log('');
    console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
    console.log('‚ïë       üß™ DIAGN√ìSTICO COMPLETO - TERRA MIDI             ‚ïë');
    console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
    console.log('');
    
    // 1. Contexto Seguro
    const secureOk = testSecureContext();
    
    // 2. Permiss√£o
    await testPermissionStatus();
    
    // 3. Status Geral
    console.log('üìä STATUS GERAL:');
    console.log('');
    console.log(`Navegador: ${navigator.userAgent.split(' ').slice(-2).join(' ')}`);
    console.log(`MIDI Suportado: ${navigator.requestMIDIAccess ? '‚úÖ' : '‚ùå'}`);
    console.log(`MIDIDeviceManager: ${window.midiManager ? '‚úÖ' : '‚ùå'}`);
    console.log(`Inicializado: ${window.midiManager?.isInitialized ? '‚úÖ' : '‚ùå'}`);
    console.log(`Dispositivos: ${window.midiManager?.connectedDevices?.size || 0}`);
    console.log('');
    
    // 4. Pr√≥ximas a√ß√µes
    console.log('üìù PR√ìXIMOS PASSOS:');
    console.log('');
    
    if (!secureOk) {
        console.log('1. ‚ö†Ô∏è Configure HTTPS ou localhost');
        console.log('2. Recarregue a p√°gina');
    }
    
    if (!window.midiManager?.isInitialized) {
        console.log('3. Clique em "Conectar MIDI" ou qualquer elemento da p√°gina');
        console.log('4. Clique rapidamente em "Permitir" quando o prompt aparecer');
    }
    
    if (window.midiManager?.connectedDevices?.size === 0) {
        console.log('5. Se nenhum dispositivo aparecer:');
        console.log('   ‚Ä¢ Feche Microsoft Edge');
        console.log('   ‚Ä¢ Feche DAWs e apps de teste MIDI');
        console.log('   ‚Ä¢ Reconecte o cabo USB');
    } else {
        console.log('6. ‚úÖ Tudo pronto! Teste pressionando uma tecla no Midi-Terra');
    }
    
    console.log('');
    console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
    console.log('‚ïë       Para mais testes, execute as fun√ß√µes abaixo:      ‚ïë');
    console.log('‚ïë                                                         ‚ïë');
    console.log('‚ïë  testUserGestureInitialization()                        ‚ïë');
    console.log('‚ïë  testErrorHandling()                                    ‚ïë');
    console.log('‚ïë  testDeviceDetection()                                  ‚ïë');
    console.log('‚ïë  testStateChangeListener()                              ‚ïë');
    console.log('‚ïë  testMIDIMessages()                                     ‚ïë');
    console.log('‚ïë  testAutoReconnection()                                 ‚ïë');
    console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
    console.log('');
}

// Exportar fun√ß√µes para escopo global
if (typeof window !== 'undefined') {
    window.testSecureContext = testSecureContext;
    window.testPermissionStatus = testPermissionStatus;
    window.testUserGestureInitialization = testUserGestureInitialization;
    window.testErrorHandling = testErrorHandling;
    window.testDeviceDetection = testDeviceDetection;
    window.testStateChangeListener = testStateChangeListener;
    window.testMIDIMessages = testMIDIMessages;
    window.testAutoReconnection = testAutoReconnection;
    window.runFullDiagnostics = runFullDiagnostics;
    
    console.log('‚úÖ Test Suite carregado. Execute runFullDiagnostics() para come√ßar.');
}
