// PWA Installer - Gerenciador de instala√ß√£o do Progressive Web App
// Autor: Terra MIDI System
// Data: 20/10/2025
// Descri√ß√£o: Gerencia prompt de instala√ß√£o e atualiza√ß√µes do PWA
// Vers√£o: 2.0 - Instala√ß√£o personalizada com feedback visual e armazenamento local

class PWAInstaller {
    constructor() {
        this.deferredPrompt = null;
        this.installButton = null;
        this.isInstalled = false;
        this.isStandalone = false;
        this.directoryHandle = null; // Para File System Access API
        this.storageEstimate = null;
        this.persistenceGranted = false;
        
        console.log('üì≤ PWAInstaller v2.0 inicializado');
        
        this.init();
    }
    
    /**
     * Inicializa o instalador PWA
     */
    init() {
        // Verificar se j√° est√° instalado
        this.checkIfInstalled();
        
        // Encontrar bot√£o de instala√ß√£o
        this.installButton = document.getElementById('btn-install-pwa');
        
        // Listeners para prompt de instala√ß√£o
        this.bindInstallPrompt();
        
        // Listener para detectar instala√ß√£o
        this.bindInstallationDetection();
        
        // Atualizar UI baseado no estado
        this.updateUI();
        
        // Solicitar persist√™ncia de armazenamento
        this.requestStoragePersistence();
        
        // Verificar diret√≥rio salvo (se dispon√≠vel)
        this.checkSavedDirectory();
        
        // Mostrar bot√£o se n√£o estiver instalado (mesmo sem beforeinstallprompt)
        if (!this.isInstalled && this.installButton) {
            // Dar tempo para beforeinstallprompt disparar
            setTimeout(() => {
                if (!this.deferredPrompt && !this.isInstalled) {
                    console.log('‚è∞ beforeinstallprompt ainda n√£o disparou ap√≥s 1.5s');
                    console.log('üì≤ Mostrando bot√£o de qualquer forma (Edge pode demorar)');
                    this.showInstallButton();
                    
                    // Adicionar dica visual no console
                    console.log('%cüí° DICA: No Edge, use Menu (‚ãØ) ‚Üí Aplicativos ‚Üí Instalar este site como um aplicativo', 
                               'color: #667eea; font-weight: bold; font-size: 12px;');
                }
            }, 1500);
            
            // Segundo timeout mais longo para Edge
            setTimeout(() => {
                if (!this.deferredPrompt && !this.isInstalled) {
                    console.log('‚è∞ beforeinstallprompt n√£o disparou ap√≥s 5s');
                    console.log('üìä Status PWA:', this.getInstallInfo());
                }
            }, 5000);
        }
        
        // Log de informa√ß√µes PWA
        this.logPWAInfo();
    }
    
    /**
     * Verifica se o app j√° est√° instalado
     */
    checkIfInstalled() {
        // Verificar se est√° rodando como standalone
        if (window.matchMedia('(display-mode: standalone)').matches) {
            this.isStandalone = true;
            this.isInstalled = true;
            console.log('‚úÖ PWA rodando em modo standalone');
        }
        
        // iOS Safari
        if (navigator.standalone === true) {
            this.isStandalone = true;
            this.isInstalled = true;
            console.log('‚úÖ PWA instalado no iOS');
        }
        
        // Verificar pelo referrer
        if (document.referrer.includes('android-app://')) {
            this.isStandalone = true;
            this.isInstalled = true;
            console.log('‚úÖ PWA instalado no Android');
        }
    }
    
    /**
     * Solicita persist√™ncia de armazenamento (evita limpeza autom√°tica)
     */
    async requestStoragePersistence() {
        if (!navigator.storage || !navigator.storage.persist) {
            console.warn('‚ö†Ô∏è navigator.storage.persist() n√£o suportado');
            return;
        }
        
        try {
            // Verificar se j√° tem persist√™ncia
            const isPersisted = await navigator.storage.persisted();
            
            if (isPersisted) {
                console.log('‚úÖ Armazenamento j√° est√° persistente');
                this.persistenceGranted = true;
                return;
            }
            
            // Solicitar persist√™ncia
            const granted = await navigator.storage.persist();
            this.persistenceGranted = granted;
            
            if (granted) {
                console.log('‚úÖ Persist√™ncia de armazenamento concedida!');
                this.showToast('‚úÖ Armazenamento seguro ativado', 'success');
            } else {
                console.warn('‚ö†Ô∏è Persist√™ncia de armazenamento negada');
            }
            
            // Verificar estimativa de storage
            await this.updateStorageEstimate();
            
        } catch (error) {
            console.error('‚ùå Erro ao solicitar persist√™ncia:', error);
        }
    }
    
    /**
     * Atualiza estimativa de armazenamento
     */
    async updateStorageEstimate() {
        if (!navigator.storage || !navigator.storage.estimate) {
            return null;
        }
        
        try {
            this.storageEstimate = await navigator.storage.estimate();
            
            const usedMB = (this.storageEstimate.usage / 1024 / 1024).toFixed(2);
            const quotaMB = (this.storageEstimate.quota / 1024 / 1024).toFixed(2);
            const percentUsed = ((this.storageEstimate.usage / this.storageEstimate.quota) * 100).toFixed(1);
            
            console.log(`üíæ Armazenamento: ${usedMB} MB / ${quotaMB} MB (${percentUsed}%)`);
            
            return this.storageEstimate;
        } catch (error) {
            console.error('‚ùå Erro ao obter estimativa de storage:', error);
            return null;
        }
    }
    
    /**
     * Permite usu√°rio escolher diret√≥rio local de instala√ß√£o (File System Access API)
     */
    async selectInstallDirectory() {
        // Verificar suporte a File System Access API
        if (!('showDirectoryPicker' in window)) {
            console.warn('‚ö†Ô∏è File System Access API n√£o suportada neste navegador');
            this.showToast('‚ö†Ô∏è Sele√ß√£o de pasta n√£o suportada neste navegador', 'warning');
            return null;
        }
        
        try {
            this.showToast('üìÇ Selecione onde deseja armazenar os dados do Terra MIDI', 'info');
            
            // Solicitar acesso ao diret√≥rio
            this.directoryHandle = await window.showDirectoryPicker({
                mode: 'readwrite',
                startIn: 'documents'
            });
            
            console.log('‚úÖ Diret√≥rio selecionado:', this.directoryHandle.name);
            
            // Salvar refer√™ncia do diret√≥rio no IndexedDB
            await this.saveDirectoryHandle();
            
            // Criar estrutura de pastas
            await this.createDirectoryStructure();
            this.saveDirectoryMetadata({ origin: 'manual-selection' });
            
            this.showToast(`‚úÖ Pasta "${this.directoryHandle.name}" configurada com sucesso!`, 'success');
            this.notifyDirectorySelection('manual-selection', {
                autoStart: false,
                autoStartMode: 'manual'
            });
            
            return this.directoryHandle;
            
        } catch (error) {
            if (error.name === 'AbortError') {
                console.log('‚ÑπÔ∏è Usu√°rio cancelou a sele√ß√£o de diret√≥rio');
            } else {
                console.error('‚ùå Erro ao selecionar diret√≥rio:', error);
                this.showToast('‚ùå Erro ao selecionar pasta', 'error');
            }
            return null;
        }
    }
    
    /**
     * Salva refer√™ncia do diret√≥rio no IndexedDB
     */
    async saveDirectoryHandle() {
        if (!this.directoryHandle) return;
        
        try {
            const db = await this.openIndexedDB();
            const tx = db.transaction('settings', 'readwrite');
            const store = tx.objectStore('settings');
            
            await store.put({
                key: 'directoryHandle',
                value: this.directoryHandle
            });
            
            console.log('‚úÖ Refer√™ncia do diret√≥rio salva no IndexedDB');
            this.saveDirectoryMetadata({ origin: 'indexeddb-save' });
        } catch (error) {
            console.error('‚ùå Erro ao salvar diret√≥rio:', error);
        }
    }
    
    /**
     * Verifica e restaura diret√≥rio salvo
     */
    async checkSavedDirectory() {
        try {
            const db = await this.openIndexedDB();
            const tx = db.transaction('settings', 'readonly');
            const store = tx.objectStore('settings');
            const result = await store.get('directoryHandle');
            
            if (result && result.value) {
                this.directoryHandle = result.value;
                
                // Verificar permiss√£o
                const permission = await this.directoryHandle.queryPermission({ mode: 'readwrite' });
                
                if (permission === 'granted') {
                    console.log('‚úÖ Diret√≥rio restaurado:', this.directoryHandle.name);
                    this.saveDirectoryMetadata({ origin: 'restored' });
                    this.notifyDirectorySelection('restored', {
                        autoStart: false,
                        autoStartMode: 'smart'
                    });
                } else if (permission === 'prompt') {
                    // Solicitar permiss√£o novamente
                    const newPermission = await this.directoryHandle.requestPermission({ mode: 'readwrite' });
                    if (newPermission === 'granted') {
                        console.log('‚úÖ Permiss√£o do diret√≥rio revalidada');
                        this.saveDirectoryMetadata({ origin: 'restored-reprompt' });
                        this.notifyDirectorySelection('restored', {
                            autoStart: false,
                            autoStartMode: 'smart'
                        });
                    } else {
                        console.warn('‚ö†Ô∏è Permiss√£o negada, diret√≥rio ser√° descartado');
                        this.directoryHandle = null;
                    }
                } else {
                    this.directoryHandle = null;
                }
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è N√£o foi poss√≠vel restaurar diret√≥rio:', error);
            this.directoryHandle = null;
        }
    }
    
    /**
     * Cria estrutura de pastas no diret√≥rio selecionado
     */
    async createDirectoryStructure() {
        if (!this.directoryHandle) return;
        
        try {
            const terraRoot = await this.ensureDirectoryChain(this.directoryHandle, ['TerraMidi']);
            const cacheRoot = await this.ensureDirectoryChain(terraRoot, ['cache']);
            await this.ensureDirectoryChain(cacheRoot, ['resources']);
            await this.ensureDirectoryChain(terraRoot, ['soundfonts']);
            await this.ensureDirectoryChain(terraRoot, ['presets']);
            await this.ensureDirectoryChain(terraRoot, ['recordings']);

            await this.writeMetadataFile(terraRoot, {
                appName: 'Terra MIDI',
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString(),
                folders: ['cache/resources', 'soundfonts', 'presets', 'recordings'],
                platform: this.getPlatform(),
                installerVersion: (typeof ADVANCED_INSTALLER_VERSION !== 'undefined') ? ADVANCED_INSTALLER_VERSION : '1.0.0'
            });

            console.log('‚úÖ Estrutura de diret√≥rios criada com sucesso');
            
        } catch (error) {
            console.error('‚ùå Erro ao criar estrutura de diret√≥rios:', error);
        }
    }
    
    async ensureDirectoryChain(rootHandle, segments = []) {
        if (!rootHandle) return null;
        let current = rootHandle;
        for (const segment of segments) {
            if (!segment) continue;
            current = await current.getDirectoryHandle(segment, { create: true });
        }
        return current;
    }

    async writeMetadataFile(rootHandle, metadata = {}) {
        if (!rootHandle) return;
        try {
            const metadataHandle = await rootHandle.getFileHandle('terra-midi-metadata.json', { create: true });
            const writable = await metadataHandle.createWritable();
            const payload = {
                ...metadata,
                version: metadata.installerVersion || (typeof ADVANCED_INSTALLER_VERSION !== 'undefined' ? ADVANCED_INSTALLER_VERSION : '1.0.0'),
                updatedAt: new Date().toISOString()
            };
            await writable.write(JSON.stringify(payload, null, 2));
            await writable.close();
        } catch (error) {
            console.warn('‚ö†Ô∏è N√£o foi poss√≠vel escrever metadados da instala√ß√£o:', (error && error.message) || error);
        }
    }

    saveDirectoryMetadata(extra = {}) {
        if (!this.directoryHandle || typeof localStorage === 'undefined') return;
        try {
            const payload = {
                name: this.directoryHandle.name,
                lastSelectedAt: Date.now(),
                ...extra
            };
            localStorage.setItem('terra-midi-directory-meta', JSON.stringify(payload));
        } catch (error) {
            console.warn('‚ö†Ô∏è N√£o foi poss√≠vel salvar metadados locais da pasta:', (error && error.message) || error);
        }
    }

    getDirectoryMetadata() {
        if (typeof localStorage === 'undefined') return null;
        try {
            const raw = localStorage.getItem('terra-midi-directory-meta');
            if (!raw) return null;
            const parsed = JSON.parse(raw);
            return parsed && typeof parsed === 'object' ? parsed : null;
        } catch (error) {
            console.warn('‚ö†Ô∏è N√£o foi poss√≠vel carregar metadados locais da pasta:', (error && error.message) || error);
            return null;
        }
    }

    notifyDirectorySelection(source = 'pwa-installer', options = {}) {
        if (!this.directoryHandle) return;
        const defaultInterval = (typeof AdvancedInstaller !== 'undefined' && AdvancedInstaller.AUTO_SYNC_INTERVAL_MS)
            ? AdvancedInstaller.AUTO_SYNC_INTERVAL_MS
            : 1000 * 60 * 60 * 6;
        const autoStartMode = options.autoStartMode || (source === 'manual-selection' ? 'immediate' : 'smart');
        const autoStart = typeof options.autoStart === 'boolean' ? options.autoStart : autoStartMode === 'immediate';
        const detail = {
            handle: this.directoryHandle,
            name: this.directoryHandle.name,
            source,
            autoStart,
            autoStartMode,
            minIntervalMs: typeof options.minIntervalMs === 'number' ? options.minIntervalMs : defaultInterval,
            directHandled: false,
            timestamp: Date.now()
        };

        const metadata = this.getDirectoryMetadata();
        if (metadata) {
            detail.metadata = metadata;
        }

        try {
            if (typeof window !== 'undefined') {
                window.terraMidiPendingDirectorySelection = detail;
            }

            if (typeof window !== 'undefined' && window.advancedInstallerUI && typeof window.advancedInstallerUI.prepareWithDirectory === 'function') {
                detail.directHandled = true;
                window.advancedInstallerUI.prepareWithDirectory(this.directoryHandle, {
                    autoStart,
                    source
                });
            }

            window.dispatchEvent(new CustomEvent('terra-midi-directory-selected', { detail }));
        } catch (error) {
            console.warn('‚ö†Ô∏è N√£o foi poss√≠vel notificar sele√ß√£o de diret√≥rio:', error);
        }
    }
    
    /**
     * Abre/cria banco IndexedDB para settings
     */
    openIndexedDB() {
        return new Promise((resolve, reject) => {
            const request = indexedDB.open('TerraMidiSettings', 1);
            
            request.onerror = () => reject(request.error);
            request.onsuccess = () => resolve(request.result);
            
            request.onupgradeneeded = (event) => {
                const db = event.target.result;
                if (!db.objectStoreNames.contains('settings')) {
                    db.createObjectStore('settings', { keyPath: 'key' });
                }
            };
        });
    }
    
    /**
     * Bind do evento beforeinstallprompt
     */
    bindInstallPrompt() {
        // Capturar evento beforeinstallprompt
        window.addEventListener('beforeinstallprompt', (e) => {
            console.log('üì≤ beforeinstallprompt capturado!');
            
            // Prevenir mini-infobar do Chrome/Edge
            e.preventDefault();
            
            // Armazenar evento para usar depois
            this.deferredPrompt = e;
            
            // Mostrar bot√£o de instala√ß√£o imediatamente
            this.showInstallButton();
            
            console.log('üì≤ Prompt de instala√ß√£o est√° pronto e bot√£o exibido');
        });
        
        // Listener do bot√£o - registrar IMEDIATAMENTE
        if (this.installButton) {
            this.installButton.addEventListener('click', (e) => {
                e.preventDefault();
                console.log('üñ±Ô∏è Clique no bot√£o de instala√ß√£o detectado');
                this.promptInstall();
            });
            console.log('‚úÖ Listener do bot√£o de instala√ß√£o registrado');
        } else {
            console.error('‚ùå Bot√£o #btn-install-pwa n√£o encontrado no DOM!');
        }
    }
    
    /**
     * Detecta quando o app foi instalado
     */
    bindInstallationDetection() {
        window.addEventListener('appinstalled', (e) => {
            console.log('‚úÖ PWA instalado com sucesso!');
            
            this.isInstalled = true;
            this.deferredPrompt = null;
            
            // Ocultar bot√£o de instala√ß√£o
            this.hideInstallButton();
            
            // Notificar usu√°rio
            this.showInstallSuccessMessage();
            
            // Analytics (se dispon√≠vel)
            if (typeof gtag !== 'undefined') {
                gtag('event', 'pwa_installed', {
                    event_category: 'engagement',
                    event_label: 'PWA Installation'
                });
            }
        });
    }
    
    /**
     * Mostra bot√£o de instala√ß√£o
     */
    showInstallButton() {
        if (this.installButton && !this.isInstalled) {
            this.installButton.style.display = 'inline-flex';
            console.log('üì≤ Bot√£o de instala√ß√£o exibido');
        }
    }
    
    /**
     * Oculta bot√£o de instala√ß√£o
     */
    hideInstallButton() {
        if (this.installButton) {
            this.installButton.style.display = 'none';
        }
    }
    
    /**
     * Exibe prompt de instala√ß√£o
     */
    async promptInstall() {
        // Se temos o prompt diferido, usar ele
        if (this.deferredPrompt) {
            try {
                console.log('üì≤ Exibindo prompt de instala√ß√£o...');
                
                // Mostrar feedback "Instalando..."
                this.showInstallModal('installing');
                
                // Mostrar prompt
                this.deferredPrompt.prompt();
                
                // Aguardar escolha do usu√°rio
                const { outcome } = await this.deferredPrompt.userChoice;
                
                console.log(`üì≤ Usu√°rio ${outcome === 'accepted' ? 'aceitou' : 'recusou'} a instala√ß√£o`);
                
                if (outcome === 'accepted') {
                    // Instala√ß√£o aceita
                    this.showInstallModal('success');
                    this.hideInstallButton();
                    
                    // Perguntar se deseja escolher diret√≥rio
                    setTimeout(() => {
                        this.offerDirectorySelection();
                    }, 2000);
                } else {
                    // Instala√ß√£o recusada
                    this.showInstallModal('cancelled');
                }
                
                // Limpar prompt usado
                this.deferredPrompt = null;
                
            } catch (error) {
                console.error('‚ùå Erro ao exibir prompt de instala√ß√£o:', error);
                this.showInstallModal('error', error.message);
                this.showInstallInstructions();
            }
            return;
        }
        
        // Se n√£o temos prompt, tentar API de relacionamento (Edge/Chrome)
        if ('getInstalledRelatedApps' in navigator) {
            try {
                const relatedApps = await navigator.getInstalledRelatedApps();
                if (relatedApps.length > 0) {
                    console.log('‚úÖ App j√° est√° instalado');
                    this.isInstalled = true;
                    this.hideInstallButton();
                    this.showToast('O Terra MIDI j√° est√° instalado! üéâ', 'success');
                    return;
                }
            } catch (error) {
                console.warn('‚ö†Ô∏è N√£o foi poss√≠vel verificar apps instalados:', error);
            }
        }
        
        // Fallback: mostrar instru√ß√µes baseadas no navegador
        console.warn('‚ö†Ô∏è Prompt de instala√ß√£o n√£o dispon√≠vel, mostrando instru√ß√µes');
        this.showInstallInstructions();
    }
    
    /**
     * Oferece sele√ß√£o de diret√≥rio ap√≥s instala√ß√£o
     */
    async offerDirectorySelection() {
        if (!('showDirectoryPicker' in window)) {
            console.log('‚ÑπÔ∏è File System Access API n√£o dispon√≠vel');
            return;
        }
        
        // Criar modal customizado
        const modal = this.createCustomModal(
            'üìÇ Escolher pasta de armazenamento',
            'Deseja escolher uma pasta para armazenar os dados do Terra MIDI? (Opcional)',
            [
                {
                    text: 'üìÇ Escolher Pasta',
                    className: 'btn-primary',
                    onClick: () => {
                        this.selectInstallDirectory();
                        this.closeCustomModal();
                    }
                },
                {
                    text: 'Agora n√£o',
                    className: 'btn-secondary',
                    onClick: () => {
                        this.closeCustomModal();
                        this.showToast('Voc√™ pode escolher a pasta depois nas configura√ß√µes', 'info');
                    }
                }
            ]
        );
        
        document.body.appendChild(modal);
    }
    
    /**
     * Mostra instru√ß√µes de instala√ß√£o manual
     */
    showInstallInstructions() {
        const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
        const isAndroid = /Android/.test(navigator.userAgent);
        const isEdge = /Edg/.test(navigator.userAgent);
        const isChrome = /Chrome/.test(navigator.userAgent) && !isEdge;
        
        let message = 'üì≤ Como instalar o Terra MIDI:\n\n';
        
        if (isIOS) {
            message += 'üì± Safari iOS:\n';
            message += '1. Toque no bot√£o Compartilhar (‚¨ÜÔ∏è)\n';
            message += '2. Role para baixo e toque em "Adicionar √† Tela de In√≠cio"\n';
            message += '3. Toque em "Adicionar"';
        } else if (isAndroid) {
            message += 'üì± Chrome Android:\n';
            message += '1. Toque no menu (‚ãÆ) no canto superior direito\n';
            message += '2. Selecione "Instalar aplicativo" ou "Adicionar √† tela inicial"\n';
            message += '3. Confirme a instala√ß√£o';
        } else if (isEdge) {
            message += 'üíª Microsoft Edge:\n\n';
            message += '1. Clique no menu (‚ãØ) no canto superior direito\n';
            message += '2. Selecione "Aplicativos" ou "Apps"\n';
            message += '3. Clique em "Instalar este site como um aplicativo"\n';
            message += '4. Confirme clicando em "Instalar"\n\n';
            message += 'OU procure o √≠cone de instala√ß√£o (‚äï) na barra de endere√ßo';
        } else if (isChrome) {
            message += 'üíª Google Chrome:\n\n';
            message += '1. Clique no menu (‚ãÆ) no canto superior direito\n';
            message += '2. Selecione "Instalar Terra MIDI..."\n';
            message += '3. Confirme clicando em "Instalar"\n\n';
            message += 'OU procure o √≠cone de instala√ß√£o (‚äï) na barra de endere√ßo';
        } else {
            message += 'üíª Desktop:\n';
            message += 'Chrome: Menu (‚ãÆ) ‚Üí Instalar Terra MIDI\n';
            message += 'Edge: Menu (‚ãØ) ‚Üí Aplicativos ‚Üí Instalar este site como um aplicativo\n';
            message += 'Opera: √çcone de instala√ß√£o na barra de endere√ßo';
        }
        
        // Usar sistema de notifica√ß√£o se dispon√≠vel
        if (typeof window.midiNotifier !== 'undefined' && window.midiNotifier.showInfo) {
            window.midiNotifier.showInfo(message);
        } else {
            alert(message);
        }
        
        console.log(message);
    }
    
    /**
     * Mensagem de sucesso ap√≥s instala√ß√£o
     */
    showInstallSuccessMessage() {
        const message = 'üéâ Terra MIDI instalado com sucesso!\n\nVoc√™ pode abrir o app a partir da tela inicial.';
        
        if (typeof window.midiNotifier !== 'undefined' && window.midiNotifier.showInfo) {
            window.midiNotifier.showInfo(message);
        } else {
            alert(message);
        }
    }
    
    /**
     * Atualiza UI baseado no estado de instala√ß√£o
     */
    updateUI() {
        // Adicionar classe ao body se estiver instalado
        if (this.isStandalone) {
            document.body.classList.add('pwa-standalone');
            console.log('‚úÖ Classe pwa-standalone adicionada ao body');
        }
        
        // Ocultar bot√£o se j√° estiver instalado
        if (this.isInstalled) {
            this.hideInstallButton();
        }
    }
    
    /**
     * Log de informa√ß√µes PWA
     */
    logPWAInfo() {
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        console.log('üì≤ INFORMA√á√ïES PWA - TERRA MIDI');
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        console.log('‚úì Instalado:', this.isInstalled);
        console.log('‚úì Modo standalone:', this.isStandalone);
        console.log('‚úì Service Worker:', 'serviceWorker' in navigator);
        console.log('‚úì beforeinstallprompt:', this.deferredPrompt !== null);
        console.log('‚úì Display mode:', this.getDisplayMode());
        console.log('‚úì Plataforma:', this.getPlatform());
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    }
    
    /**
     * Detecta modo de exibi√ß√£o atual
     */
    getDisplayMode() {
        const modes = ['fullscreen', 'standalone', 'minimal-ui', 'browser'];
        
        for (const mode of modes) {
            if (window.matchMedia(`(display-mode: ${mode})`).matches) {
                return mode;
            }
        }
        
        return 'unknown';
    }
    
    /**
     * Detecta plataforma
     */
    getPlatform() {
        const ua = navigator.userAgent;
        
        if (/iPad|iPhone|iPod/.test(ua)) return 'iOS';
        if (/Android/.test(ua)) return 'Android';
        if (/Windows/.test(ua)) return 'Windows';
        if (/Mac/.test(ua)) return 'macOS';
        if (/Linux/.test(ua)) return 'Linux';
        
        return 'Unknown';
    }
    
    /**
     * Verifica se pode ser instalado
     */
    canInstall() {
        return (
            !this.isInstalled &&
            (this.deferredPrompt !== null || this.canInstallManually())
        );
    }
    
    /**
     * Verifica se pode ser instalado manualmente
     */
    canInstallManually() {
        const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
        const isStandalone = navigator.standalone === true;
        
        return isIOS && !isStandalone;
    }
    
    /**
     * Obt√©m informa√ß√µes de instala√ß√£o
     */
    getInstallInfo() {
        return {
            isInstalled: this.isInstalled,
            isStandalone: this.isStandalone,
            canInstall: this.canInstall(),
            displayMode: this.getDisplayMode(),
            platform: this.getPlatform(),
            hasDirectoryAccess: this.directoryHandle !== null,
            storageEstimate: this.storageEstimate,
            persistenceGranted: this.persistenceGranted
        };
    }
    
    /**
     * Mostra toast notification
     */
    showToast(message, type = 'info') {
        // Remover toast anterior se existir
        const existingToast = document.querySelector('.pwa-toast');
        if (existingToast) {
            existingToast.remove();
        }
        
        const toast = document.createElement('div');
        toast.className = `pwa-toast pwa-toast-${type}`;
        toast.setAttribute('role', 'alert');
        toast.setAttribute('aria-live', 'polite');
        
        const icon = {
            'success': '‚úÖ',
            'error': '‚ùå',
            'warning': '‚ö†Ô∏è',
            'info': '‚ÑπÔ∏è'
        }[type] || '‚ÑπÔ∏è';
        
        toast.innerHTML = `
            <span class="toast-icon">${icon}</span>
            <span class="toast-message">${message}</span>
            <button class="toast-close" aria-label="Fechar">√ó</button>
        `;
        
        document.body.appendChild(toast);
        
        // Animar entrada
        setTimeout(() => toast.classList.add('show'), 10);
        
        // Fechar ao clicar
        const closeBtn = toast.querySelector('.toast-close');
        closeBtn.addEventListener('click', () => {
            toast.classList.remove('show');
            setTimeout(() => toast.remove(), 300);
        });
        
        // Auto-fechar ap√≥s 5 segundos
        setTimeout(() => {
            if (toast.parentElement) {
                toast.classList.remove('show');
                setTimeout(() => toast.remove(), 300);
            }
        }, 5000);
    }
    
    /**
     * Mostra modal de instala√ß√£o
     */
    showInstallModal(state, errorMessage = '') {
        // Remover modal anterior
        const existingModal = document.querySelector('.pwa-install-modal');
        if (existingModal) {
            existingModal.remove();
        }
        
        const modal = document.createElement('div');
        modal.className = 'pwa-install-modal';
        modal.setAttribute('role', 'dialog');
        modal.setAttribute('aria-modal', 'true');
        
        let content = '';
        
        switch (state) {
            case 'installing':
                content = `
                    <div class="modal-content modal-installing">
                        <div class="spinner"></div>
                        <h3>Instalando Terra MIDI...</h3>
                        <p>Aguarde enquanto o aplicativo √© instalado</p>
                    </div>
                `;
                break;
                
            case 'success':
                content = `
                    <div class="modal-content modal-success">
                        <div class="success-icon">üéâ</div>
                        <h3>Instalado com sucesso!</h3>
                        <p>O Terra MIDI foi instalado e est√° pronto para uso</p>
                        <button class="btn-close-modal">Come√ßar a usar</button>
                    </div>
                `;
                break;
                
            case 'error':
                content = `
                    <div class="modal-content modal-error">
                        <div class="error-icon">‚ùå</div>
                        <h3>Erro na instala√ß√£o</h3>
                        <p>${errorMessage || 'Ocorreu um erro durante a instala√ß√£o'}</p>
                        <button class="btn-close-modal">Tentar novamente</button>
                    </div>
                `;
                break;
                
            case 'cancelled':
                content = `
                    <div class="modal-content modal-cancelled">
                        <div class="info-icon">‚ÑπÔ∏è</div>
                        <h3>Instala√ß√£o cancelada</h3>
                        <p>Voc√™ pode instalar o Terra MIDI a qualquer momento</p>
                        <button class="btn-close-modal">OK</button>
                    </div>
                `;
                break;
        }
        
        modal.innerHTML = content;
        document.body.appendChild(modal);
        
        // Animar entrada
        setTimeout(() => modal.classList.add('show'), 10);
        
        // Fechar modal
        const closeBtn = modal.querySelector('.btn-close-modal');
        if (closeBtn) {
            closeBtn.addEventListener('click', () => {
                modal.classList.remove('show');
                setTimeout(() => modal.remove(), 300);
            });
        }
        
        // Auto-fechar ap√≥s alguns segundos (exceto installing)
        if (state !== 'installing') {
            setTimeout(() => {
                if (modal.parentElement) {
                    modal.classList.remove('show');
                    setTimeout(() => modal.remove(), 300);
                }
            }, 4000);
        }
    }
    
    /**
     * Cria modal customizado
     */
    createCustomModal(title, message, buttons = []) {
        const modal = document.createElement('div');
        modal.className = 'pwa-custom-modal';
        modal.setAttribute('role', 'dialog');
        modal.setAttribute('aria-modal', 'true');
        
        const buttonsHTML = buttons.map(btn => 
            `<button class="${btn.className}" data-action="${btn.text}">${btn.text}</button>`
        ).join('');
        
        modal.innerHTML = `
            <div class="modal-overlay"></div>
            <div class="modal-content">
                <h3>${title}</h3>
                <p>${message}</p>
                <div class="modal-buttons">
                    ${buttonsHTML}
                </div>
            </div>
        `;
        
        // Bind eventos dos bot√µes
        buttons.forEach((btn, index) => {
            const btnElement = modal.querySelectorAll('.modal-buttons button')[index];
            if (btnElement && btn.onClick) {
                btnElement.addEventListener('click', btn.onClick);
            }
        });
        
        // Fechar ao clicar no overlay
        const overlay = modal.querySelector('.modal-overlay');
        overlay.addEventListener('click', () => {
            this.closeCustomModal();
        });
        
        // Animar entrada
        setTimeout(() => modal.classList.add('show'), 10);
        
        return modal;
    }
    
    /**
     * Fecha modal customizado
     */
    closeCustomModal() {
        const modal = document.querySelector('.pwa-custom-modal');
        if (modal) {
            modal.classList.remove('show');
            setTimeout(() => modal.remove(), 300);
        }
    }
}

// Exportar para uso global (com prote√ß√£o contra re-declara√ß√£o)
if (typeof window !== 'undefined') {
    // Evitar re-declara√ß√£o se o script for carregado mais de uma vez
    if (!window.PWAInstaller) {
        window.PWAInstaller = PWAInstaller;
        
        // Instanciar automaticamente quando DOM estiver pronto
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => {
                if (!window.pwaInstaller) {
                    window.pwaInstaller = new PWAInstaller();
                }
            });
        } else {
            if (!window.pwaInstaller) {
                window.pwaInstaller = new PWAInstaller();
            }
        }
    } else {
        console.log('‚ö†Ô∏è PWAInstaller j√° foi carregado, ignorando re-declara√ß√£o');
    }
}
